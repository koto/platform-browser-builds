/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { TrustedTypePolicyAdapter } from '../src/security/trusted_types_policy';
var MockTrustedTypePolicyAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(MockTrustedTypePolicyAdapter, _super);
    function MockTrustedTypePolicyAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MockTrustedTypePolicyAdapter.prototype.maybeCreateTrustedURL = function (value) { throw new Error('Method not implemented.'); };
    MockTrustedTypePolicyAdapter.prototype.maybeCreateTrustedHTML = function (value) { throw new Error('Method not implemented.'); };
    MockTrustedTypePolicyAdapter.prototype.maybeCreateTrustedScript = function (value) { throw new Error('Method not implemented.'); };
    MockTrustedTypePolicyAdapter.prototype.maybeCreateTrustedScriptURL = function (value) {
        return 'modified-by-policy-adapter:' + value;
    };
    MockTrustedTypePolicyAdapter.prototype.maybeCreateTrustedValueForAttribute = function (el, name, value, namespace) {
        throw new Error('Method not implemented.');
    };
    MockTrustedTypePolicyAdapter.prototype.isHTML = function (obj) { throw new Error('Method not implemented.'); };
    MockTrustedTypePolicyAdapter.prototype.isURL = function (obj) { throw new Error('Method not implemented.'); };
    MockTrustedTypePolicyAdapter.prototype.isScriptURL = function (obj) { throw new Error('Method not implemented.'); };
    MockTrustedTypePolicyAdapter.prototype.isScript = function (obj) { throw new Error('Method not implemented.'); };
    return MockTrustedTypePolicyAdapter;
}(TrustedTypePolicyAdapter));
export { MockTrustedTypePolicyAdapter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja190cnVzdGVkX3R5cGVfcG9saWN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcGxhdGZvcm0tYnJvd3Nlci90ZXN0aW5nL21vY2tfdHJ1c3RlZF90eXBlX3BvbGljeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7O0FBRUgsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFFOUU7SUFBa0Qsd0RBQXdCO0lBQTFFOztJQWVBLENBQUM7SUFkQyw0REFBcUIsR0FBckIsVUFBc0IsS0FBYSxJQUFZLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUYsNkRBQXNCLEdBQXRCLFVBQXVCLEtBQWEsSUFBWSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdGLCtEQUF3QixHQUF4QixVQUF5QixLQUFhLElBQVksTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRixrRUFBMkIsR0FBM0IsVUFBNEIsS0FBYTtRQUN2QyxPQUFPLDZCQUE2QixHQUFHLEtBQUssQ0FBQztJQUMvQyxDQUFDO0lBQ0QsMEVBQW1DLEdBQW5DLFVBQ0ksRUFBTyxFQUFFLElBQVksRUFBRSxLQUFhLEVBQUUsU0FBNEI7UUFDcEUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFDRCw2Q0FBTSxHQUFOLFVBQU8sR0FBUSxJQUFhLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekUsNENBQUssR0FBTCxVQUFNLEdBQVEsSUFBYSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLGtEQUFXLEdBQVgsVUFBWSxHQUFRLElBQWEsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RSwrQ0FBUSxHQUFSLFVBQVMsR0FBUSxJQUFhLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0UsbUNBQUM7QUFBRCxDQUFDLEFBZkQsQ0FBa0Qsd0JBQXdCLEdBZXpFIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1RydXN0ZWRUeXBlUG9saWN5QWRhcHRlcn0gZnJvbSAnLi4vc3JjL3NlY3VyaXR5L3RydXN0ZWRfdHlwZXNfcG9saWN5JztcblxuZXhwb3J0IGNsYXNzIE1vY2tUcnVzdGVkVHlwZVBvbGljeUFkYXB0ZXIgZXh0ZW5kcyBUcnVzdGVkVHlwZVBvbGljeUFkYXB0ZXIge1xuICBtYXliZUNyZWF0ZVRydXN0ZWRVUkwodmFsdWU6IHN0cmluZyk6IHN0cmluZyB7IHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTsgfVxuICBtYXliZUNyZWF0ZVRydXN0ZWRIVE1MKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcgeyB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7IH1cbiAgbWF5YmVDcmVhdGVUcnVzdGVkU2NyaXB0KHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcgeyB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7IH1cbiAgbWF5YmVDcmVhdGVUcnVzdGVkU2NyaXB0VVJMKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiAnbW9kaWZpZWQtYnktcG9saWN5LWFkYXB0ZXI6JyArIHZhbHVlO1xuICB9XG4gIG1heWJlQ3JlYXRlVHJ1c3RlZFZhbHVlRm9yQXR0cmlidXRlKFxuICAgICAgZWw6IGFueSwgbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBuYW1lc3BhY2U/OiBzdHJpbmd8dW5kZWZpbmVkKTogc3RyaW5nIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cbiAgaXNIVE1MKG9iajogYW55KTogYm9vbGVhbiB7IHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTsgfVxuICBpc1VSTChvYmo6IGFueSk6IGJvb2xlYW4geyB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7IH1cbiAgaXNTY3JpcHRVUkwob2JqOiBhbnkpOiBib29sZWFuIHsgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpOyB9XG4gIGlzU2NyaXB0KG9iajogYW55KTogYm9vbGVhbiB7IHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTsgfVxufVxuIl19